```c++
/*
给你一个 非空 整数数组 nums ，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。

你必须设计并实现线性时间复杂度的算法来解决此问题，且该算法只使用常量额外空间。
*/

/*
异或运算:相同数为0;不同数为1;该数组有且只有一个数唯一,侧通过循环,对每个数进行异或操作,最终得到只出现一次的数
*/

class Solution {                               
public:                               
    int singleNumber(vector<int>& nums) {                               
        int i=0;                               
        for(int j=0;j<nums.size();j++){                               
            i ^=nums[j];                               
        }
        return i;                               
    }
};
```
